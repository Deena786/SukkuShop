@model SukkuShop.Models.ChangeUserInfoViewModel

@{
    ViewBag.Title = "EditUserInfo";
}

<h2>EditUserInfo</h2>

@using (Html.BeginForm("EditUserInfo", "Manage", FormMethod.Post, new { @class = "form-horizontal editUserInfoForm", role = "form" }))
{
    @Html.AntiForgeryToken()
    <hr />
    <div class="form-group">
        @Html.LabelFor(m => m.Name, new { @class = "col-md-2 control-label" })
        <div class="col-md-10">
            @Html.TextBoxFor(m => m.Name, new { @class = "form-control" })
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.LastName, new { @class = "col-md-2 control-label" })
        <div class="col-md-10">
            @Html.TextBoxFor(m => m.LastName, new { @class = "form-control" })
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.Phone, new { @class = "col-md-2 control-label" })
        <div class="col-md-10">
            @Html.TextBoxFor(m => m.Phone, new { @class = "form-control" })
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.City, new { @class = "col-md-2 control-label" })
        <div class="col-md-10">
            @Html.TextBoxFor(m => m.City, new {@class = "form-control", onkeyup="$(this).value.toUpperCase();"})
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.Street, new { @class = "col-md-2 control-label" })
        <div class="col-md-10">
            @Html.TextBoxFor(m => m.Street, new { @class = "form-control", onkeyup = "$(this).value.toUpperCase();" })
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.Number, new { @class = "col-md-2 control-label" })
        <div class="col-md-10">
            @Html.TextBoxFor(m => m.Number, new { @class = "form-control", onkeyup = "$(this).value.toUpperCase();" })
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.PostalCode, new { @class = "col-md-2 control-label" })
        <div class="col-md-10">
            @Html.TextBoxFor(m => m.PostalCode, new { @class = "form-control" })
        </div>
    </div>
    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" class="btn btn-default" value="Register" />
        </div>
    </div>
}

@section Scripts {
    <script>
        $(document).ready(function() {
            $('.editUserInfoForm').bootstrapValidator({
                message: 'This value is not valid',
                feedbackIcons: {
                    valid: 'glyphicon glyphicon-ok',
                    invalid: 'glyphicon glyphicon-remove',
                    validating: 'glyphicon glyphicon-refresh'
                },
                fields: {
                    Name: {
                        validators: {
                            notEmpty: {
                                message: 'Imię nie może być puste!'
                            }
                        }
                    },
                    LastName: {
                        validators: {
                            notEmpty: {
                                message: 'Nazwisko nie może być puste!'
                            }
                        }
                    },
                    Phone: {
                        validators: {
                            notEmpty: {
                                message: 'Pole telefon nie może być puste!'
                            },
                            regexp: {
                                regexp: '[1-9][0-9]{8}',
                                message: 'Numer telefonu jest nieprawidłowy!'
                            }
                        }
                    },
                    City:
                    {
                        validators: {
                            notEmpty: {
                                message: 'Pole Miasto nie może być puste!'
                            },
                            regexp: {
                                regexp: '[A-Za-z]+$',
                                message: 'Nazwa miasta jest nieprawidłowa!'
                            }
                        }
                    },
                    Street:
                    {
                        validators: {
                            notEmpty: {
                                message: 'Pole Ulica nie może być puste!'
                            },
                            regexp: {
                                regexp: '[A-Za-z]+$',
                                message: 'Nazwa ulicy jest nieprawidłowa!'
                            }
                        }
                    },
                    Number:
                    {
                        validators: {
                            notEmpty: {
                                message: 'Pole Numer domu nie może być puste!'
                            },
                            regexp: {
                                regexp: '^[1-9][0-9]{0,3}[A-Za-z]{0,1}$',
                                message: 'Numer domu jest nieprawidłowy!'
                            }
                        }
                    },
                    PostalCode:
                    {
                        validators: {
                            notEmpty: {
                                message: 'Pole Kod pocztowy nie może być puste!'
                            },
                            regexp: {
                                regexp: '[0-9]{2}-[0-9]{3}',
                                message: 'Kod pocztowy jest nieprawidłowy! {xx-xxx}'
                            }
                        }
                    },


                }
            });
        });
    </script>
}